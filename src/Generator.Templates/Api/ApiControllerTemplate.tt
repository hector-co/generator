<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Templates.Queries" #>
<#@ import namespace="Generator.Templates.Commands" #>
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using MediatR;
using <#= _module.GetDtoNamespace(_model) #>;
using <#= _module.GetCommandsNamespace(_model) #>;

namespace <#= _module.GetApiNamespace() #>
{
    [Route("<#= _module.Settings.ApiPrefix #>/<#= _model.GetApiRouteName() #>")]
    public class <#= _model.PluralName #>Controller : ControllerBase
    {
        private readonly IMediator _mediator;

        public <#= _model.PluralName #>Controller(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet("{id}", Name = "Get<#= _model.Name #>ById")]
        public async Task<IActionResult> Get(<#= _model.IdentifierProperty.TypeName #> id, CancellationToken cancellationToken)
        {
            var getByIdQuery = new <#= _model.GetDtoByIdClassName() #>(id);
            var result = await _mediator.Send(getByIdQuery, cancellationToken);
            if (result.Data == null) return NotFound();
            return Ok(result);
        }

        [HttpGet]
        public async Task<IActionResult> Get([FromQuery] <#= _model.ListDtoClassName() #> query, CancellationToken cancellationToken)
        {
            var result = await _mediator.Send(query, cancellationToken);
            return Ok(result);
        }

        [HttpPost]
        public async Task<IActionResult> Register([FromBody] <#= _model.GetRegisterCommandClassName() #> command, CancellationToken cancellationToken)
        {
            var id = await _mediator.Send(command, cancellationToken);
            var result = await _mediator.Send(new <#= _model.GetDtoByIdClassName() #>(id), cancellationToken);
            return CreatedAtRoute("Get<#= _model.Name #>ById", new { id }, result);
        }
    }
}
