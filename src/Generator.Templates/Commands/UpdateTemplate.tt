<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#      foreach (var @using in _model.CustomTypeNamespaces) 
        { #>
using <#= @using #>;
<#      } #>
<#  if (_module.Settings.CommandUsings.Any()) 
    { #>
<#      foreach (var @using in _module.Settings.CommandUsings) 
        { #>
using <#= string.Format(@using, _module.Namespace) #>;
<#      } #>

<#  } #>
namespace <#= _module.GetCommandsNamespace(_model) #>;

public record <#= _model.GetUpdateCommandClassName() #>
(
<#  foreach(var (propInfo, index, count) in GetPropertiesInfo(_model).WithIndex())
    { #>
    <#= propInfo.TypeName #> <#= propInfo.Name #><#= (index == count - 1? "" : ",")#>
<#  } #>) : ICommand<Result<bool>>
{
    [SwaggerIgnore]
    public <#= _model.IdentifierType #> <#= _model.IdentifierProperty.Name #> { get; set; }
<# if(HasSubClasses(_module, _model)) 
   { #>

<#     foreach(var subClass in GetSubClasses(_module, _model)) 
       { #>
    public record <#= subClass.Key #>(
<#        foreach(var (propInfo, index, count) in subClass.Value.WithIndex())
          { #>
        <#= propInfo.TypeName #> <#= propInfo.Name #><#= (index == count-1? ");" : ",")#>
<#        } #>
<#     } #>
<# } #>
}