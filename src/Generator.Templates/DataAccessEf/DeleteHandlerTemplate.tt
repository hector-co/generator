<#@ import namespace="System.Linq" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Generator.Templates.Commands" #>
using Microsoft.EntityFrameworkCore;
using <#= _module.GetDomainModelNamespace() #>;
<#  if (_module.Settings.CommandHandlerUsings.Any()) 
    { #>
<#      foreach (var @using in _module.Settings.CommandHandlerUsings) 
        { #>
using <#= string.Format(@using, _module.Namespace) #>;
<#      } #>
<#  } #>
using <#= _module.GetCommandsNamespace(_model) #>;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>.Commands;

public class <#= _model.GetDeleteCommandClassName() #>Handler(IDbContext context) : ICommandHandler<<#= _model.GetDeleteCommandClassName() #>, Fin<bool>>
{
    public async Task<Fin<bool>> Handle(<#= _model.GetDeleteCommandClassName() #> request, CancellationToken cancellationToken)
    {
        var <#= _model.Name.GetVariableName() #> = await context.Set<<#= _model.Name #>>()
            .FirstOrDefaultAsync(m => m.<#= _model.IdentifierProperty.Name #> == request.<#= _model.IdentifierProperty.Name #>, cancellationToken);

        if (<#= _model.Name.GetVariableName() #> == null)
            return DomainErrors.NotFound("<#= _model.Name #>");

        context.Remove(<#= _model.Name.GetVariableName() #>);
        await context.SaveChangesAsync(cancellationToken);
        return true;
    }
}