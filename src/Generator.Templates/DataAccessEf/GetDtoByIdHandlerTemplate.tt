<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Generator.Templates.Queries" #>
using Mapster;
using Microsoft.EntityFrameworkCore;
using <#= _module.GetDomainModelNamespace() #>;
using <#= _module.GetQueriesNamespace() #>;
using <#= _module.GetDtoNamespace(_model) #>;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>.Queries;

public class <#= _model.GetDtoByIdClassName() #>Handler : IQueryHandler<<#= _model.GetDtoByIdClassName() #>, <#= _model.GetDtoName() #>>
{
    private readonly <#= _module.GetContextName() #> _context;

    public <#= _model.GetDtoByIdClassName() #>Handler(<#= _module.GetContextName() #> context)
    {
        _context = context;
    }

    public async Task<Result<<#= _model.GetDtoName() #>>> Handle(<#= _model.GetDtoByIdClassName() #> request, CancellationToken cancellationToken)
    {
        var data = await _context.Set<<#= _model.Name #>>()
<#    if (QueryableExtensionsTemplate.RequiresIncludes(_model))
{ #>
            .AddIncludes()
<#    } #>
            .AsNoTracking()
            .FirstOrDefaultAsync(m => request.Id == m.Id, cancellationToken);

        return new Result<<#= _model.GetDtoName() #>>(data?.Adapt<<#= _model.GetDtoName() #>>());
    }
}