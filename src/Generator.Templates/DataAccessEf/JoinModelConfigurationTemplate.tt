<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Metadata" #>
<#@ import namespace="Generator.Templates.Domain" #>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using <#= _namespace.GetDomainModelNamespace() #>;

namespace <#= _modelDefinition.GetDataAccessModelNamespace(_namespace) #>
{
    public class <#= _modelDefinition.GetJoinModelTypeName(_propertyDefinition) #>Configuration : IEntityTypeConfiguration<<#= _modelDefinition.GetJoinModelTypeName(_propertyDefinition) #>>
    {
        private readonly string _dbSchema;

        public <#= _modelDefinition.GetJoinModelTypeName(_propertyDefinition) #>Configuration(string dbSchema)
        {
            _dbSchema = dbSchema;
        }

        public void Configure(EntityTypeBuilder<<#= _modelDefinition.GetJoinModelTypeName(_propertyDefinition) #>> builder)
        {
            builder.HasKey(m => new { m.<#= _modelDefinition.Name #>Id, m.<#= _propertyDefinition.CastTargetType<ModelTypeDefinition>().Model.Name #>Id });
            builder.ToTable("<#= _modelDefinition.GetJoinModelTypeName(_propertyDefinition) #>", _dbSchema);
            builder.HasOne(m => m.<#= _modelDefinition.Name #>).WithMany(m => m.<#= _propertyDefinition.Name #>DataAccess);
            builder.HasOne(m => m.<#= _propertyDefinition.CastTargetType<ModelTypeDefinition>().Model.Name #>)
                .WithMany().OnDelete(DeleteBehavior.Restrict);
        }
    }
}