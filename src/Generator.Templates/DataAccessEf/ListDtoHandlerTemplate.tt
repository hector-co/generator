<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Generator.Templates.Queries" #>
using Mapster;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using <#= _module.GetDomainModelNamespace() #>;
using <#= _module.GetQueriesNamespace() #>;
using <#= _module.GetDtoNamespace(_model) #>;
using QueryX;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>.Queries
{
    public class <#= _model.ListDtoClassName() #>Handler : IRequestHandler<<#= _model.ListDtoClassName() #>, ResultModel<IEnumerable<<#= _model.GetDtoName() #>>>>
    {
        private readonly <#= _module.GetContextName() #> _context;

        public <#= _model.ListDtoClassName() #>Handler(<#= _module.GetContextName() #> context)
        {
            _context = context;
        }

        public async Task<ResultModel<IEnumerable<<#= _model.GetDtoName() #>>>> Handle(<#= _model.ListDtoClassName() #> request, CancellationToken cancellationToken)
        {
            var result = new ResultModel<IEnumerable<<#= _model.GetDtoName() #>>>();

            var queryable = _context.Set<<#= _model.Name #>>()
<#    if (QueryableExtensionsTemplate.RequiresIncludes(_model))
    { #>
                .AddIncludes() 
<#    } #>
                .AsNoTracking();

            queryable = queryable.ApplyQuery(request, applyOrderingAndPaging: false);
            result.TotalCount = await queryable.CountAsync(cancellationToken);
            queryable = queryable.ApplyOrderingAndPaging(request);

            var data = await queryable.ToListAsync(cancellationToken);
           
            result.Data = data.Adapt<List<<#= _model.GetDtoName() #>>>();

            return result;
        }
    }
}