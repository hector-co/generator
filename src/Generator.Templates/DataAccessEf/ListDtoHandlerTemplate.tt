<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Generator.Templates.Queries" #>
using Microsoft.EntityFrameworkCore;
using <#= _module.GetDomainModelNamespace() #>;
<#  if (_module.Settings.QueryHandlerUsings.Any()) 
    { #>
<#      foreach (var @using in _module.Settings.QueryHandlerUsings) 
        { #>
using <#= string.Format(@using, _module.Namespace) #>;
<#      } #>
<#  } #>
using <#= _module.GetDtoNamespace(_model) #>;
using QueryX;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>.Queries;

public class <#= _model.ListDtoClassName() #>Handler(IDbContext context) : IQueryHandler<<#= _model.ListDtoClassName() #>, <#= _model.GetDtoName() #>[]>
{
    public async Task<QueryResult<<#= _model.GetDtoName() #>[]>> Handle(<#= _model.ListDtoClassName() #> request, CancellationToken cancellationToken)
    {
        var queryable = context.Set<<#= _model.Name #>>()
<#    if (QueryableExtensionsTemplate.RequiresIncludes(_model))
{ #>
            .AddIncludes() 
<#    } #>
            .AsNoTracking();

        queryable = queryable.ApplyQuery(request, applyOrderingAndPaging: false);
        var totalCount = await queryable.CountAsync(cancellationToken);
        queryable = queryable.ApplyOrderingAndPaging(request);

        var data = await queryable.ToListAsync(cancellationToken);

        return new QueryResult<<#= _model.GetDtoName() #>[]>(data.Adapt<<#= _model.GetDtoName() #>[]>(), totalCount);
    }
}