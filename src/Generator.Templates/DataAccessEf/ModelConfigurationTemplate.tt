<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Metadata" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Humanizer" #>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Collections.Generic;
using System.Linq;
using <#= _module.GetDomainModelNamespace() #>;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>;

public class <#= _model.Name #>Configuration : IEntityTypeConfiguration<<#= _model.Name #>>
{
    private readonly string _dbSchema;

    public <#= _model.Name #>Configuration(string dbSchema)
    {
        _dbSchema = dbSchema;
    }

    public void Configure(EntityTypeBuilder<<#= _model.Name #>> builder)
    {
        builder.ToTable("<#= _model.Name #>", _dbSchema);
<#    foreach(var propertyName in GetIgnoredPropertyNames(_model))
{ #>
        builder.Ignore(m => m.<#= propertyName #>);
<#    } #>
<#    foreach(var propertyName in GetSerializedPropertyNames(_model))
{ #>
        builder.Property(m => m.<#= propertyName #>_Serialized);
<#    } #>
<#    foreach(var property in _model.Properties.Values.Where(p => !p.IsCollection && (p.TargetType.IsNullable || !string.IsNullOrEmpty(p.DbType) || p.Size.HasValue || !string.IsNullOrEmpty(p.DbType))))
{ #>
        builder.Property(m => m.<#= property.Name #>)
<#        if(property.TargetType.IsNullable) 
          { #>
            .IsRequired(false)<#= property.Size.HasValue? "" : ";" #>
<#        } #>
<#        if(!string.IsNullOrEmpty(property.DbType)) 
    { #>
            .HasColumnType("<#= property.DbType #>")<#= property.Size.HasValue? "" : ";" #>
<#        } #>
<#        if(property.Size.HasValue) 
    { #>
            .HasMaxLength(<#= property.Size.Value #>);
<#        } #>
<#    } #>
<#    foreach(var propertyName in GetNonGenericEntitiesPropertyNames(_model))
{ #>
        builder.HasOne(m => m.<#= propertyName #>)
            .WithMany()
            .HasForeignKey(r => r.<#= propertyName #>Id);
<#    } #>
<#    foreach(var property in GetManyToOneProperties(_model))
{ #>
        builder.HasMany(m => m.<#= property.Name #>)
            .WithOne()
<#        if (_model.HasMultiplePropertiesWithModelType(property.CastTargetType<ModelTypeDefinition>().Model, property.IsGeneric))
    { #>
            .HasForeignKey(r => r.<#= property.Name #><#= _model.Name #>Id);
<#        } #>
<#        else
    { #>
            .HasForeignKey(r => r.<#= _model.Name #>Id);
<#        } #>
<#    } #>
<#    foreach(var property in _model.Properties.Values.Where(p => p.WithMany))
{ #>
        builder.HasMany(m => m.<#= property.Name #>)
            .WithMany(r => r.<#= $"{_model.Name}{property.Name}"#>)
            .UsingEntity<Dictionary<string, object>>(
                "<#= $"{_model.Name}{property.Name.Singularize()}" #>",
                j => j
                    .HasOne<<#= property.CastTargetType<ModelTypeDefinition>().Model.Name #>>()
                    .WithMany()
                    .HasForeignKey("<#= property.Name.Singularize() #>Id"),
                j => j
                    .HasOne<<#= _model.Name #>>()
                    .WithMany()
                    .HasForeignKey("<#= _model.Name #>Id"));
<#    } #>
<#    foreach(var property in _model.Properties.Values.Where(p => p.IsValueObjectType))
{ #>
<#        if (property.IsCollection)
        { #>
        builder.OwnsMany(m => m.<#= property.Name #>)
            .ToTable("<#= _model.Name #><#= property.Name #>", _dbSchema)
            .WithOwner().HasForeignKey("<#= _model.Name #>Id");
<#        } #>
<#        else if (!property.IsGeneric)
        { #>
        builder.OwnsOne(m => m.<#= property.Name #>)
            .ToTable("<#= _model.Name #><#= property.Name #>", _dbSchema)
            .WithOwner().HasForeignKey("<#= _model.Name #>Id");
<#        } #>
<#    } #>
    }
}