<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Metadata" #>
<#@ import namespace="Generator.Templates.Domain" #>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Collections.Generic;
using System.Linq;
using <#= _namespace.GetDomainModelNamespace() #>;

namespace <#= _modelDefinition.GetDataAccessModelNamespace(_namespace) #>
{
    public class <#= _modelDefinition.Name #>Configuration : IEntityTypeConfiguration<<#= _modelDefinition.Name #>>
    {
        private readonly string _dbSchema;

        public <#= _modelDefinition.Name #>Configuration(string dbSchema)
        {
            _dbSchema = dbSchema;
        }

        public void Configure(EntityTypeBuilder<<#= _modelDefinition.Name #>> builder)
        {
            builder.ToTable("<#= _modelDefinition.Name #>", _dbSchema);
<#    foreach(var propertyName in GetIgnoredPropertyNames(_modelDefinition))
    { #>
            builder.Ignore(m => m.<#= propertyName #>);
<#    } #>
<#    foreach(var propertyName in GetSerializedPropertyNames(_modelDefinition))
    { #>
            builder.Property(m => m.<#= propertyName #>_Serialized);
<#    } #>
<#    foreach(var property in _modelDefinition.Properties.Values.Where(p => p.Size.HasValue || (p.Required.HasValue && !p.IsCollection)))
    { #>
            builder.Property(m => m.<#= property.Name #>)
<#        if(property.Required.HasValue && property.Required.Value) 
        { #>
                .IsRequired()<#= property.Size.HasValue? "" : ";" #>
<#        } #>
<#        if(property.Size.HasValue) 
        { #>
                .HasMaxLength(<#= property.Size.Value #>);
<#        } #>
<#    } #>
<#    foreach(var propertyName in GetNonGenericEntitiesPropertyNames(_modelDefinition))
    { #>
            builder.HasOne(m => m.<#= propertyName #>)
                .WithMany()
                .HasForeignKey(r => r.<#= propertyName #>Id);
<#    } #>
<#    foreach(var property in GetManyToOneProperties(_modelDefinition))
    { #>
            builder.HasMany(m => m.<#= property.Name #>)
                .WithOne()
<#        if (_modelDefinition.HasMultiplePropertiesWithModelType(property.CastTargetType<ModelTypeDefinition>().Model, property.IsGeneric))
        { #>
                .HasForeignKey(r => r.<#= property.Name #><#= _modelDefinition.Name #>Id);
<#        } #>
<#        else
        { #>
                .HasForeignKey(r => r.<#= _modelDefinition.Name #>Id);
<#        } #>
<#    } #>
<#    foreach(var property in _modelDefinition.Properties.Values.Where(p => p.WithMany))
    { #>
            builder.HasMany(m => m.<#= property.Name #>)
                .WithMany(r => r.<#= _modelDefinition.PluralName #>)
                .UsingEntity<Dictionary<string, object>>(
                    "<#= _modelDefinition.Name #><#= property.CastTargetType<ModelTypeDefinition>().Model.PluralName #>",
                    j => j
                        .HasOne<<#= property.CastTargetType<ModelTypeDefinition>().Model.Name #>>()
                        .WithMany()
                        .HasForeignKey("<#= property.CastTargetType<ModelTypeDefinition>().Model.Name #>Id"),
                    j => j
                        .HasOne<<#= _modelDefinition.Name #>>()
                        .WithMany()
                        .HasForeignKey("<#= _modelDefinition.Name #>Id"));
<#    } #>
<#    foreach(var property in _modelDefinition.Properties.Values.Where(p => p.IsValueObjectType))
    { #>
<#        if (property.IsCollection)
          { #>
            builder.OwnsMany(m => m.<#= property.Name #>)
                .ToTable("<#= _modelDefinition.Name #><#= property.Name #>", _dbSchema)
                .WithOwner().HasForeignKey("<#= _modelDefinition.Name #>Id");
<#        } #>
<#        else if (!property.IsGeneric)
          { #>
            builder.OwnsOne(m => m.<#= property.Name #>)
                .ToTable("<#= _modelDefinition.Name #><#= property.Name #>", _dbSchema)
                .WithOwner().HasForeignKey("<#= _modelDefinition.Name #>Id");
<#        } #>
<#    } #>
        }
    }
}