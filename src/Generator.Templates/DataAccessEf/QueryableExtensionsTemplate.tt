<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Generator.Templates.Domain" #>
<#@ import namespace="Generator.Templates.Queries" #>
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using <#= _module.GetDomainModelNamespace() #>;
using <#= _module.GetDtoNamespace(_model) #>;

namespace <#= _module.GetDataAccessModelNamespace(_model) #>;

internal static class <#= _model.Name #>QueryableExtensions
{
<#    if (RequiresIncludes(_model))
{ #>
    static <#= _model.Name #>QueryableExtensions()
    {
        TypeAdapterConfig<<#= _model.Name #>, <#= _model.GetDtoName() #>>
            .NewConfig()
<#        foreach (var propName in GetRelatedEntitiesPropertyNames(_model))
    { #>
            .Map(dst => dst.<#= propName #>, src => src.<#= propName #>)
<#        } #>
            ;
    }

    internal static IQueryable<<#= _model.Name #>> AddIncludes
        (this IQueryable<<#= _model.Name #>> queryable)
    {
        return queryable
<#        foreach (var propName in GetRelatedEntitiesPropertyNames(_model))
    { #>
            .Include(m => m.<#= propName #>)
<#        } #>
            ;
    }
<#    } #>
}